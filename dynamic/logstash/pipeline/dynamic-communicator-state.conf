input {
    pipeline {
        address => "communicator-state"
    }
}
# Dynamic Central User Events
#
# Timestamp: time that the event actually occured
# @t : Time the event was processed by Dynanic Central Status Monitor
# @timestamp: Time that the event was ingested into elasticsearch
filter {
    json {
        source => "message"
        skip_on_invalid_json => true
        remove_field => [ "@mt" ]
    }

    # We're only interested in CommunicatorStateChange events so drop everything else
    if [MessageType] != "CommunicatorStateChange" {
        drop { }
    }
    # format field as a date object so it can be succesfully parsed by the Ruby code below
    date {
        match => ["Timestamp", "ISO8601"]
        target => "date_object"
    }
    # create epoch time value to be used as the document _version so that older events can't over-write the most recent one
    ruby {
        code => "
            event.set('epoch', event.get('date_object').to_i)
        "
    }
    mutate { 
        remove_field => [ "message", "host" ]
    }
}
output {
    elasticsearch {
        hosts => ["elasticsearch:9200"]
        user => elastic
        password => elastic
        index => "dynamic-communicator-state"
        document_id => "%{CommunicatorSerialNumber}"
        version => "%{epoch}"
        version_type => "external"
        failure_type_logging_whitelist => ["version_conflict_engine_exception"]
    }
}