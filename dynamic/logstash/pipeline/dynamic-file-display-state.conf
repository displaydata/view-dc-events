input {
    pipeline {
        address => "file-display-state"
    }
}
# Dynamic Central User Events
#
# Timestamp: time that the event actually occured
# @t : Time the event was processed by Dynanic Central Status Monitor
# @timestamp: Time that the event was ingested into elasticsearch
filter {
    json {
        source => "message"
        skip_on_invalid_json => true
        remove_field => [ "@mt" ]
    }
    if !([MessageType] in ["DisplayUpdateComplete", "SystemHealthCheck", "BatteryReplace", "DisplayConfigurationComplete", "DisplayRestorationPropertiesStageComplete", "DisplayUnconfigurationComplete" ]) {
        drop {}
    }
    date {
        match => ["Timestamp", "ISO8601"]
        target => "date_object"
    }
    # Removed un-used fields and set new ones based on updates to display-state
    if [MessageType] == "DisplayUpdateComplete" {
        if [Result] == "NoError" {
            mutate {
                add_field => { "[DisplayUpdateComplete][SuccessTimestamp]" => "%{Timestamp}"}
            }
            mutate {
                add_field => { "[DisplayUpdateComplete][SuccessResult]" => "%{Result}"}   
            }
            mutate {
                add_field => { "[DisplayUpdateComplete][Success]" => "true"}   
            }
            mutate {
                add_field => { "EventTimestampFieldName" => "%{DisplayUpdateComplete.SuccessTimestamp}" }
            }
        } else {
            mutate {
                add_field => { "[DisplayUpdateComplete][FailureTimestamp]" => "%{Timestamp}"}
            }
            mutate {
                add_field => { "[DisplayUpdateComplete][FailureResult]" => "%{Result}"}   
            }
            mutate {
                add_field => { "[DisplayUpdateComplete][Success]" => "false"}   
            }
            mutate {
                add_field => { "EventTimestampFieldName" => "%{DisplayUpdateComplete.FailureTimestamp}" }
            }
        }
        mutate {
            remove_field => ["Result", "Success"]
        }
    }
    if [MessageType] == "BatteryReplace" {
        mutate {
            add_field => { "[BatteryReplace][Timestamp]" => "%{Timestamp}" }
        }
        mutate {
            add_field => { "[BatteryReplace][Required]" => "true" }
        }
        mutate {
            add_field => { "EventTimestampFieldName" => "%{BatteryReplace.Timestamp}" }
        }
    }
    if [MessageType] == "SystemHealthCheck" {
        if [Result] == "NoError" {
            mutate {
                add_field => { "[SystemHealthCheck][SuccessTimestamp]" => "%{SystemHealthCheckTime}" }
            }
            mutate {
                add_field => { "[SystemHealthCheck][SuccessResult]" => "%{Result}" }
            }
            mutate {
                add_field => { "[SystemHealthCheck][Success]" => "true" }
            }
            mutate {
                add_field => { "EventTimestampFieldName" => "%{SystemHealthCheck.SuccessTimestamp}" }
            }
        } else {
            mutate {
                add_field => { "[SystemHealthCheck][FailureTimestamp]" => "%{SystemHealthCheckTime}" }
            }
            mutate {
                add_field => { "[SystemHealthCheck][SuccessResult]" => "%{Result}" }
            }
            mutate {
                add_field => { "[SystemHealthCheck][Success]" => "false" }
            }
            mutate {
                add_field => { "EventTimestampFieldName" => "%{SystemHealthCheck.FailureTimestamp}" }
            }
        }
        mutate {
            remove_field => [ "Result", "Success", "SystemHealthCheckTime"]
        }
    }
    if [MessageType] == "DisplayConfigurationComplete" {
        mutate {
            add_field => { "[DisplayConfigurationComplete][Success]" => "%{Success}"}
        }
        mutate {
            add_field => { "[DisplayConfigurationComplete][Result]" => "%{Result}" }
        }
        mutate {
            add_field => { "[DisplayConfigurationComplete][Timestamp]" => "%{Timestamp}"
            }
        }
        mutate {
            add_field => { "EventTimestampFieldName" => "%{DisplayConfigurationComplete.Timestamp}" }
        }
        mutate {
            remove_field => [ "Result", "Success"]
        }
    }
    if [MessageType] == "DisplayRestorationPropertiesStageComplete" {
        mutate {
            add_field => { "[DisplayRestorationPropertiesStageComplete][Success]" => "%{Success}"}
        }
        mutate {
            add_field => { "[DisplayRestorationPropertiesStageComplete][Result]" => "%{Result}" }
        }
        mutate {
            add_field => { "[DisplayRestorationPropertiesStageComplete][Timestamp]" => "%{Timestamp}"
            }
        }
        mutate {
            add_field => { "EventTimestampFieldName" => "%{DisplayRestorationPropertiesStageComplete.Timestamp}" }
        }
        mutate {
            remove_field => [ "Result", "Success"]
        }
    }
    if [MessageType] == "DisplayUnconfigurationComplete" {
        mutate {
            add_field => { "[DisplayUnconfigurationComplete][Success]" => "%{Success}"}
        }
        mutate {
            add_field => { "[DisplayUnconfigurationComplete][Result]" => "%{Result}" }
        }
        mutate {
            add_field => { "[DisplayUnconfigurationComplete][Timestamp]" => "%{Timestamp}"
            }
        }
        mutate {
            add_field => { "EventTimestampFieldName" => "%{DisplayUnconfigurationComplete.Timestamp}" }
        }
        mutate {
            remove_field => [ "Result", "Success"]
        }
    }
    mutate { 
        remove_field => [ "message", "host" ]
    }
}
output {
    if [MessageType] in "DisplayUpdateComplete" {
        elasticsearch {
            hosts => ["elasticsearch:9200"]
            user => elastic
            password => elastic
            action => update
            doc_as_upsert => true
            index => "dynamic-display-state"
            document_id => "%{DisplaySerialNumber}"
            script => "def timestampFieldName = params.event.EventTimestampFieldName; if (ctx._source.containsKey(timestampFieldName)) { Instant stored_change_time = Instant.parse(ctx._source[timestampFieldName]); Instant new_change_time = Instant.parse(params.event[timestampFieldName]); if (new_change_time.isBefore(stored_change_time)) { ctx.op = 'none'; return }} for (entry in params.event.entrySet()) { def key = entry.getKey(); ctx._source[key] = entry.getValue(); ctx._source.remove('EventTimestampFieldName')}"
        }    
    } else if [MessageType] in "SystemHealthCheck" {
        elasticsearch {
            hosts => ["elasticsearch:9200"]
            user => elastic
            password => elastic
            action => update
            doc_as_upsert => true
            index => "dynamic-display-state"
            document_id => "%{DisplaySerialNumber}"
            script => "def timestampFieldName = params.event.EventTimestampFieldName; if (ctx._source.containsKey(timestampFieldName)) { Instant stored_change_time = Instant.parse(ctx._source[timestampFieldName]); Instant new_change_time = Instant.parse(params.event[timestampFieldName]); if (new_change_time.isBefore(stored_change_time)) { ctx.op = 'none'; return }} for (entry in params.event.entrySet()) { def key = entry.getKey(); ctx._source[key] = entry.getValue(); ctx._source.remove('EventTimestampFieldName')}"
        }    
    } else if [MessageType] in "BatteryReplace" {
        elasticsearch {
            hosts => ["elasticsearch:9200"]
            user => elastic
            password => elastic
            action => update
            doc_as_upsert => true
            index => "dynamic-display-state"
            document_id => "%{DisplaySerialNumber}"
            script => "def timestampFieldName = params.event.EventTimestampFieldName; if (ctx._source.containsKey(timestampFieldName)) { Instant stored_change_time = Instant.parse(ctx._source[timestampFieldName]); Instant new_change_time = Instant.parse(params.event[timestampFieldName]); if (new_change_time.isBefore(stored_change_time)) { ctx.op = 'none'; return }} for (entry in params.event.entrySet()) { def key = entry.getKey(); ctx._source[key] = entry.getValue(); ctx._source.remove('EventTimestampFieldName')}"
        }    
    } else if [MessageType] in "DisplayConfigurationComplete" {
        elasticsearch {
            hosts => ["elasticsearch:9200"]
            user => elastic
            password => elastic
            action => update
            doc_as_upsert => true
            index => "dynamic-display-state"
            document_id => "%{DisplaySerialNumber}"
            script => "def timestampFieldName = params.event.EventTimestampFieldName; if (ctx._source.containsKey(timestampFieldName)) { Instant stored_change_time = Instant.parse(ctx._source[timestampFieldName]); Instant new_change_time = Instant.parse(params.event[timestampFieldName]); if (new_change_time.isBefore(stored_change_time)) { ctx.op = 'none'; return }} for (entry in params.event.entrySet()) { def key = entry.getKey(); ctx._source[key] = entry.getValue(); ctx._source.remove('EventTimestampFieldName')}"
        }    
    } else if [MessageType] in "DisplayRestorationPropertiesStageComplete" {
        elasticsearch {
            hosts => ["elasticsearch:9200"]
            user => elastic
            password => elastic
            action => update
            doc_as_upsert => true
            index => "dynamic-display-state"
            document_id => "%{DisplaySerialNumber}"
            script => "def timestampFieldName = params.event.EventTimestampFieldName; if (ctx._source.containsKey(timestampFieldName)) { Instant stored_change_time = Instant.parse(ctx._source[timestampFieldName]); Instant new_change_time = Instant.parse(params.event[timestampFieldName]); if (new_change_time.isBefore(stored_change_time)) { ctx.op = 'none'; return }} for (entry in params.event.entrySet()) { def key = entry.getKey(); ctx._source[key] = entry.getValue(); ctx._source.remove('EventTimestampFieldName')}"
        }    
    } else if [MessageType] in "DisplayUnconfigurationComplete" {
        elasticsearch {
            hosts => ["elasticsearch:9200"]
            user => elastic
            password => elastic
            action => update
            doc_as_upsert => true
            index => "dynamic-display-state"
            document_id => "%{DisplaySerialNumber}"
            script => "def timestampFieldName = params.event.EventTimestampFieldName; if (ctx._source.containsKey(timestampFieldName)) { Instant stored_change_time = Instant.parse(ctx._source[timestampFieldName]); Instant new_change_time = Instant.parse(params.event[timestampFieldName]); if (new_change_time.isBefore(stored_change_time)) { ctx.op = 'none'; return }} for (entry in params.event.entrySet()) { def key = entry.getKey(); ctx._source[key] = entry.getValue(); ctx._source.remove('EventTimestampFieldName')}"
        }    
    } else {
        elasticsearch {
            hosts => ["elasticsearch:9200"]
            user => elastic
            password => elastic
            action => index
            doc_as_upsert => true
            index => "fallback"
            document_id => "%{DisplaySerialNumber}"
        }
    }
}   