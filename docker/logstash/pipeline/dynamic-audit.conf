input {
  pipeline {
    address => "audit"
  }
}

filter {
  json {
    source => "message"
    skip_on_invalid_json => true
    remove_field => [ "@mt" ]
  }

  # find $type value (supplied by Greg)
  ruby {
    code => "
      response_data = event.get('[ResponseData]')
      event.remove('[ResponseData]')
      if response_data
        if response_data.is_a?(Integer)
          event.set('[ResponseData][int]', response_data)
        elsif response_data.is_a?(String)
          event.set('[ResponseData][string]', response_data)
        elsif [true, false].include? response_data
          event.set('[ResponseData][bool]', response_data)
        elsif response_data.is_a?(Hash)
          response_data_type = response_data.delete('$type')
          if response_data_type
            event.set('[ResponseData][' + response_data_type + ']', response_data)
          else
            event.set('[UntypedResponseData]', response_data)
          end
        else
          event.set('[UntypedResponseData]', response_data)
        end
      end

      request_data = event.get('[RequestData]')
      if request_data
        new_request_data = {}
        unhandled_request_data = {}
        request_data.each do |k, v|
          if v.nil?
            new_request_data[k] = nil
          elsif v.is_a?(Integer)
            new_request_data[k] = { 'int' => v }
          elsif v.is_a?(String)
            new_request_data[k] = { 'string' => v }
          elsif [true, false].include? v
            new_request_data[k] = { 'bool' => v }
          elsif v.is_a?(Hash)
            v_data_type = v.delete('$type')
            if v_data_type
              new_request_data[k] = { v_data_type => v }
            else
              unhandled_request_data[k] = v
            end
          else
            unhandled_request_data[k] = v
          end
        end
        event.remove('[RequestData]')
        event.set('[RequestData]', new_request_data.to_h)
        if unhandled_request_data
          event.set('[UntypedRequestData]', unhandled_request_data)
        end
      end
    "
  }
  json_encode {
    source => "[UntypedResponseData]"
  }
  json_encode {
    source => "[UntypedRequestData]"
  }

  # changes based on previous audit pipeline
  mutate {
    rename => {
      "RequestData" => "Request"
      "ResponseData" => "Response"
    }
    convert => {
      "RequestCorrelationId" => "string"
    }
    remove_field => [ "message", "host" ]
  }
}

output {
  elasticsearch {
    hosts => ["${HOSTS:elasticsearch:9200}"]
    user => "${USER:elastic}"
    password => "${PASSWORD:elastic}"
    index => "dynamic-audit-%{+YYYY.MM}"
  }
}