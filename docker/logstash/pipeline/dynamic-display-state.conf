input {
    pipeline {
        address => "display-state"
    }
}
# Dynamic Central User Events
#
# Timestamp: time that the event actually occured
# @t : Time the event was processed by Dynanic Central Status Monitor
# @timestamp: Time that the event was ingested into elasticsearch
filter {
    json {
        source => "message"
        skip_on_invalid_json => true
        remove_field => [ "@mt" ]
    }
    if !([MessageType] in ["DisplayUpdateComplete", "SystemHealthCheck", "BatteryReplace", "DisplayConfigurationComplete", "DisplayRestorationPropertiesStageComplete", "DisplayUnconfigurationComplete" ]) {
        drop {}
    }
    date {
        match => ["Timestamp", "ISO8601"]
        target => "date_object"
    }
    # Removed un-used fields and set new ones based on updates to display-state
    if [MessageType] == "DisplayUpdateComplete" {
        if [Result] == "NoError" {
            mutate {
                add_field => {
                    "[DisplayUpdateComplete][LastSuccessTimestamp]" => "%{Timestamp}"
                    "[DisplayUpdateComplete][Timestamp]" => "%{Timestamp}"
                    "[DisplayUpdateComplete][Success]" => true
                    "EventTimestampContainerName" => "DisplayUpdateComplete"
                    "EventTimestampFieldName" => "LastSuccessTimestamp"
                }
            }
        } else {
            mutate {
                add_field => {
                    "[DisplayUpdateComplete][LastFailureTimestamp]" => "%{Timestamp}"
                    "[DisplayUpdateComplete][Timestamp]" => "%{Timestamp}"
                    "[DisplayUpdateComplete][FailureResult]" => "%{Result}"
                    "[DisplayUpdateComplete][Success]" => false
                    "EventTimestampContainerName" => "DisplayUpdateComplete"
                    "EventTimestampFieldName" => "LastFailureTimestamp"
                }
            }
        }
        mutate {
            convert => { 
                "[DisplayUpdateComplete][Success]" => "boolean"
            }
        }
        mutate {
            remove_field => ["Result", "Success" ]
        }
    }
    if [MessageType] == "BatteryReplace" {
        mutate {
            add_field => { 
                "[BatteryReplace][Timestamp]" => "%{Timestamp}"
                "[BatteryReplace][Required]" => true
                "EventTimestampContainerName" => "BatteryReplace"
                "EventTimestampFieldName" => "Timestamp"
            }
        }
        mutate {
            convert => { "[BatteryReplace][Required]" => "boolean" }
        }
    }
    if [MessageType] == "SystemHealthCheck" {
        if [Result] == "NoError" {
            mutate {
                add_field => {
                    "[SystemHealthCheck][LastSuccessTimestamp]" => "%{SystemHealthCheckTime}"
                    "[SystemHealthCheck][Timestamp]" => "%{SystemHealthCheckTime}"
                    "[SystemHealthCheck][Success]" => true
                    "EventTimestampContainerName" => "SystemHealthCheck"
                    "EventTimestampFieldName" => "LastSuccessTimestamp"
                }
            }            
        } else {
            mutate {
                add_field => {
                    "[SystemHealthCheck][LastFailureTimestamp]" => "%{SystemHealthCheckTime}"
                    "[SystemHealthCheck][Timestamp]" => "%{SystemHealthCheckTime}"
                    "[SystemHealthCheck][Success]" => false
                    "[SystemHealthCheck][FailureResult]" => "%{Result}"
                    "EventTimestampContainerName" => "SystemHealthCheck"
                    "EventTimestampFieldName" => "LastFailureTimestamp"
                }
            }
        }
        mutate {
            convert => { "[SystemHealthCheck][Success]" => "boolean" }
        }
        mutate {
            remove_field => [ "Result", "Success", "SystemHealthCheckTime" ]
        }
    }
    if [MessageType] == "DisplayConfigurationComplete" {
        mutate {
            add_field => {
                "[DisplayConfigurationComplete][Timestamp]" => "%{Timestamp}"
                "[DisplayConfigurationComplete][Success]" => "%{Success}"
                "[DisplayConfigurationComplete][Result]" => "%{Result}"
                "EventTimestampContainerName" => "DisplayConfigurationComplete"
                "EventTimestampFieldName" => "Timestamp"
            }
        }
        mutate {
            convert => { "[DisplayConfigurationComplete][Success]" => "boolean" }
        }
        mutate {
            remove_field => [ "Result", "Success" ]
        }
    }
    if [MessageType] == "DisplayRestorationPropertiesStageComplete" {
        mutate {
            add_field => {
                "[DisplayRestorationPropertiesStageComplete][Timestamp]" => "%{Timestamp}"
                "[DisplayRestorationPropertiesStageComplete][Success]" => "%{Success}"
                "[DisplayRestorationPropertiesStageComplete][Result]" => "%{Result}"
                "EventTimestampContainerName" => "DisplayRestorationPropertiesStageComplete"
                "EventTimestampFieldName" => "Timestamp"
            }
        }
        mutate {
            convert => { "[DisplayRestorationPropertiesStageComplete][Success]" => "boolean" }
        }
        mutate {
            remove_field => [ "Result", "Success" ]
        }
    }
    if [MessageType] == "DisplayUnconfigurationComplete" {
        mutate {
            add_field => { 
                "[DisplayUnconfigurationComplete][Timestamp]" => "%{Timestamp}"
                "[DisplayUnconfigurationComplete][Success]" => "%{Success}"
                "[DisplayUnconfigurationComplete][Result]" => "%{Result}"
                "EventTimestampContainerName" => "DisplayUnconfigurationComplete"
                "EventTimestampFieldName" => "Timestamp"
            }
        }
        mutate {
            convert => { "[DisplayUnconfigurationComplete][Success]" => "boolean" }
        }
        mutate {
            remove_field => [ "Result", "Success" ]
        }
    }
    # this applies to ALL messagesTypes
    mutate { 
        remove_field => [ "message", "host", "logs" ]
    }
}
output {
    elasticsearch {
        hosts => ["elasticsearch:9200"]
        user => elastic
        password => elastic
        action => update
        doc_as_upsert => true
        index => "dynamic-display-state"
        document_id => "%{DisplaySerialNumber}"
        script => "def timestampContainerName = params.event.EventTimestampContainerName; def timestampFieldName = params.event.EventTimestampFieldName;  if (ctx._source.containsKey(timestampContainerName) && ctx._source[timestampContainerName].containsKey(timestampFieldName)) { Instant stored_change_time = Instant.parse(ctx._source[timestampContainerName][timestampFieldName]); Instant new_change_time = Instant.parse(params.event[timestampContainerName][timestampFieldName]); if (new_change_time.isBefore(stored_change_time)) { ctx.op = 'none'; return;  }  } def timestamp = params.event[timestampContainerName][timestampFieldName]; params.event.remove('EventTimestampFieldName'); params.event.remove('EventTimestampContainerName'); for (entry in params.event.entrySet()) { def key = entry.getKey(); ctx._source[key] = entry.getValue(); } boolean replaceBattery = ctx._source.containsKey('BatteryReplace') ? ctx._source.BatteryReplace.Required : false; boolean updateSuccess = ctx._source.containsKey('DisplayUpdateComplete') ? ctx._source.DisplayUpdateComplete.Success : true; boolean healthCheckSuccess = ctx._source.containsKey('SystemHealthCheck') ? ctx._source.SystemHealthCheck.Success : true;  def storeHealth; if (replaceBattery) { storeHealth = 'ReplaceBattery' } else if (updateSuccess && healthCheckSuccess) {  storeHealth = 'Last Image Update and Healthcheck Success'; } else if (updateSuccess && !healthCheckSuccess) { storeHealth = 'Last Image Update Succcess but Last Healthcheck Failure'; } else { storeHealth = 'Both Image and Last Healthcheck Failure'; } if (ctx._source.StoreHealthDashboard == null) {  ctx._source.StoreHealthDashboard = new LinkedHashMap() }  if (storeHealth != ctx._source.StoreHealthDashboard.Health) { ctx._source.StoreHealthDashboard.Health = storeHealth; ctx._source.StoreHealthDashboard.LastChangedTimestamp = timestamp; } ctx._source.StoreHealthDashboard.Timestamp = timestamp;"
    }    
}
